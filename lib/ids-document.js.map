{"version":3,"sources":["../src/ids-document.js"],"names":["IdsAxios","IdsDocument","constructor","obj","undefined","collectionName","schemaOverride","properties","required","attributes","originals","__ajv","schema","_populate","create","instance","prototype","save","find","id","Array","_findByIds","_findById","destroy","delete","query","q","_query","all","_all","update","insert","_schemaInit","_validate","_cast","then","r","_transformResults","get","ids","objectId","results","map","d","opts","schemaDefaults","Ajv","allErrors","addSchema","compile","data","getSchema","propertyKeys","Object","keys","filter","key","format","forEach","valueOf","validate","errors","toJSON"],"mappings":"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","file":"ids-document.js","sourcesContent":["import moment from 'moment'\nimport Ajv from 'ajv'\nimport normalizeErrors from 'ajv-error-messages'\nimport merge from 'lodash.merge';\n\nimport * as IdsAxios from './ids-axios'\nimport { wrap } from './ids-proxy'\n\nimport { defaults as schemaDefaults } from './ids-schema'\nimport { toDate, dateTransformer, idTransformer, runTransformers } from './utils'\n\nexport default class IdsDocument {\n\n    // name of the class in ids\n    collectionName = null\n    // schema defaults\n    schemaOverride = {}\n    // json schema for validation\n    properties = null\n    // required properties\n    required = []\n    // data from ids doctored up\n    attributes = {}\n    // raw data from ids\n    originals = {}\n    // ajv \n    __ajv = null\n    // schema\n    schema = null\n\n    // \n    // constructor\n    //     \n\n    constructor(obj = undefined) {\n        this._populate(obj)\n        return wrap(this)\n    }\n\n    //\n    // static api\n    //\n\n    static async create(obj) {\n        const instance = new this.prototype.constructor(obj)\n        await instance.save()\n        return instance\n    }\n\n    static async find(id) {\n        const instance = new this.prototype.constructor()\n        if (id instanceof Array)\n            return instance._findByIds(id)\n        return instance._findById(id)\n    }\n\n    static async destroy(id) {\n        const instance = new this.prototype.constructor({ id })\n        return await instance.delete()\n    }\n\n    static async query(q) {\n        const instance = new this.prototype.constructor()\n        return await instance._query(q)\n    }\n\n    static async all() {\n        const instance = new this.prototype.constructor()\n        return await instance._all()\n    }\n\n    //\n    // instance api\n    //\n\n    async save() {\n        if (this.id)\n            return await this.update()\n        return await this.insert()\n    }\n\n    async insert() {\n        // init our schema\n        this._schemaInit() // will throw errors if the schema is bad\n        // check to see if we have good data\n        this._validate()\n\n        return await IdsAxios.create(this.collectionName, this._cast())\n            .then(r => this._transformResults(r))\n    }\n\n    async update() {\n        debugger\n        // we don't do validation on update cuz\n        // things get weird...even mongoose has some\n        // stickly logic around updates...not really worth it\n        return await IdsAxios.update(this.collectionName, this.id, this._cast())\n            .then(r => this._transformResults(r))\n    }\n\n    async delete() {\n        return await IdsAxios.delete(this.collectionName, this.id)\n            .then(r => this._transformResults(r))\n    }\n\n    async _query(q) {\n        return await IdsAxios.query(this.collectionName, { query: q })\n            .then(r => this._transformResults(r))\n    }\n\n    async _all() {\n        return await IdsAxios.all(this.collectionName)\n            .then(r => this._transformResults(r))\n    }\n\n    async _findById(id) {\n        return await IdsAxios.get(this.collectionName, id)\n            .then(r => this._transformResults(r))\n    }\n\n    async _findByIds(ids) {\n        return await this.query({ objectId: { \"in\": ids } })\n    }\n\n    // \n    // helpers\n    // \n\n    get id() {\n        if (this.attributes.objectId)\n            return this.attributes.objectId\n        return undefined\n    }\n\n    _transformResults(results) {\n        // if ids doesn't find anything\n        // it returns a 204\n        if (!results)\n            return undefined\n        // if we get an array back from ids\n        // loop over them and convert into instance \n        if (results instanceof Array)\n            return results.map(d => new this.constructor(d))\n        // create instance\n        return new this.constructor(results)\n    }\n\n    _populate(obj) {\n        // transform\n        runTransformers(obj)\n        // update data\n        this.attributes = { ...obj }\n        this.originals = { ...obj }\n    }\n\n    _schemaInit(opts = undefined) {\n        if (this.__ajv)\n            return // we only wanna do this once per object\n\n        if (this.schema)\n            return\n\n        // merge schema defaults with overrides and properties\n        const schema = merge(schemaDefaults, this.schemaOverride)\n        schema.properties = merge(schema.properties, this.properties)\n        this.schema = schema\n\n        this.__ajv = new Ajv({ allErrors: true })\n        this.__ajv.addSchema(schema, this.collectionName)\n            .compile(schema)\n    }\n\n    _cast() {\n        // keep track of data\n        const data = { ...this.attributes }\n        // get our schema so we can find properties of \n        // date-time so we can convert them\n        const { schema } = this.__ajv.getSchema(this.collectionName)\n        // find our properties\n        const propertyKeys = Object.keys(schema.properties)\n            .filter(key => schema.properties[key].format && schema.properties[key].format === 'date-time')\n        // convert these props into strings\n        propertyKeys.forEach(key => {\n            if (data[key])\n                data[key] = data[key].valueOf()\n        })\n        return data\n    }\n\n    _validate() {\n        if (!this.__ajv.validate(this.collectionName, this._cast()))\n            throw this.__ajv.errors\n    }\n\n    // \n    // native overrides\n    //     \n\n    toJSON() {\n        return this.attributes\n    }\n}"]}