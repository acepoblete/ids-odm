{"version":3,"sources":["../src/ids-document.js"],"names":["IdsAxios","IdsDocument","constructor","obj","undefined","opts","collectionName","properties","required","attributes","originals","schema","__ajv","_populate","create","instance","prototype","save","find","id","Array","_findByIds","_findById","destroy","delete","query","q","_query","all","_all","_schemaInit","_validate","update","then","r","_transformResults","saveOrUpdate","get","ids","objectId","results","map","d","runTransformers","Ajv","allErrors","addSchema","compile","data","getSchema","propertyKeys","Object","keys","filter","key","format","forEach","valueOf","validate","errors","toJSON","toDate","prop","moment","isDate","isMoment","utc","dateTransformer","idTransformer"],"mappings":"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","file":"ids-document.js","sourcesContent":["import moment from 'moment'\nimport Ajv from 'ajv'\nimport normalizeErrors from 'ajv-error-messages'\n\nimport * as IdsAxios from './ids-axios'\nimport { wrap } from './ids-proxy'\n\nexport default class IdsDocument {\n    // name of the class in ids\n    collectionName = null\n    // json schema for validation\n    properties = {}\n    // required properties\n    required = []\n    // data from ids doctored up\n    attributes = {}\n    // raw data from ids\n    originals = {}\n    // schema for validation\n    schema = null\n    // ajv \n    __ajv = null\n\n    // \n    // constructor\n    //     \n\n    constructor(obj = undefined, opts = undefined) {\n        this._populate(obj)\n        return wrap(this)\n    }\n\n    //\n    // static api\n    //\n\n    static async create(obj) {\n        const instance = new this.prototype.constructor(obj)\n        await instance.save()\n        return instance\n    }\n\n    static async find(id) {\n        const instance = new this.prototype.constructor()\n        if (id instanceof Array)\n            return instance._findByIds(id)\n        return instance._findById(id)\n    }\n\n    static async destroy(id) {\n        const instance = new this.prototype.constructor({ id })\n        return await instance.delete()\n    }\n\n    static async query(q) {\n        const instance = new this.prototype.constructor()\n        return await instance._query(q)\n    }\n\n    static async all() {\n        const instance = new this.prototype.constructor()\n        return await instance._all()\n    }\n\n    //\n    // instance api\n    //\n\n    async save() {\n        // init our schema\n        this._schemaInit() // will throw errors if the schema is bad\n        // check to see if we have good data\n        this._validate()\n\n        return await IdsAxios.update(this.collectionName, this.id, this.attributes)\n            .then(r => this._transformResults(r))\n    }\n\n    async update() {\n        return await IdsAxios.update(this.collectionName, this.id, this.attributes)\n            .then(r => this._transformResults(r))\n    }\n\n    async saveOrUpdate() {\n        if (this.id)\n            return await this.update()\n        return await this.save()\n    }\n\n    async delete() {\n        return await IdsAxios.delete(this.collectionName, this.id)\n            .then(r => this._transformResults(r))\n    }\n\n    async _query(q) {\n        return await IdsAxios.query(this.collectionName, { query: q })\n            .then(r => this._transformResults(r))\n    }\n\n    async _all() {\n        return await IdsAxios.all(this.collectionName)\n            .then(r => this._transformResults(r))\n    }\n\n    async _findById(id) {\n        return await IdsAxios.get(this.collectionName, id)\n            .then(r => this._transformResults(r))\n    }\n\n    async _findByIds(ids) {\n        return await this.query({ objectId: { \"in\": ids } })\n    }\n\n    // \n    // helpers\n    // \n\n    get id() {\n        if (this.attributes.objectId)\n            return this.attributes.objectId\n        return undefined\n    }\n\n    _transformResults(results) {\n        // if ids doesn't find anything\n        // it returns a 204\n        if (!results)\n            return undefined\n        // if we get an array back from ids\n        // loop over them and convert into instance \n        if (results instanceof Array)\n            return results.map(d => new this.constructor(d))\n        // create instance\n        return new this.constructor(results)\n    }\n\n    _populate(obj) {\n        // transform\n        runTransformers(obj)\n        // update data\n        this.attributes = { ...obj }\n        this.originals = { ...obj }\n    }\n\n    _schemaInit(opts = undefined) {\n        if (this.__ajv)\n            return // we only wanna do this once per object\n\n        this.__ajv = new Ajv({ allErrors: true })\n        this.__ajv.addSchema(this.schema, this.collectionName)\n            .compile(this.schema)\n    }\n\n    _validate() {\n        // keep track of data\n        const data = { ...this.attributes }\n        // get our schema so we can find properties of \n        // date-time so we can convert them\n        const { schema } = this.__ajv.getSchema(this.collectionName)\n        // find our properties\n        const propertyKeys = Object.keys(schema.properties)\n            .filter(key => schema.properties[key].format && schema.properties[key].format === 'date-time')\n        // convert these props into strings\n        propertyKeys.forEach(key => {\n            if (data[key])\n                data[key] = data[key].valueOf()\n        })\n\n        if (!this.__ajv.validate(this.collectionName, data))\n            throw this.__ajv.errors\n    }\n\n    // \n    // native overrides\n    //     \n\n    toJSON() {\n        return this.attributes\n    }\n}\n\nconst toDate = (obj, prop) => {\n    if (obj && obj[prop] && (!moment.isDate(obj[prop]) && !moment.isMoment(obj[prop])))\n        obj[prop] = moment.utc(obj[prop])\n}\n\nconst dateTransformer = obj => {\n    toDate(obj, 'updatedAt')\n    toDate(obj, 'createdAt')\n}\n\nconst idTransformer = obj => {\n    if (obj && obj.id) {\n        const { id } = obj\n        delete obj.id\n        obj.objectId = id\n    }\n}\n\nconst runTransformers = obj => {\n    idTransformer(obj)\n    dateTransformer(obj)\n}"]}